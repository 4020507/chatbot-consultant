import tensorflow as tf
from tensorflow.keras.models import Model, load_model
from tensorflow.keras import preprocessing

class IntentModel:
    def __init__(self,model_name,proprocess):
        # 의도 클래스 별 레이블
        self.labels = {0: '감정/감정조절이상',
1: '감정/감정조절이상/화',
2:	'감정/걱정',
3:	'감정/걱정/건강문제',
4:	'감정/걱정/건강염려',
5:	'감정/걱정/경제적문제',
6:	'감정/걱정/미래',
7:	'감정/걱정/불면',
8:	'감정/걱정/암',
9:	'감정/걱정/자녀',
10:	'감정/걱정/주변평가',
11:	'감정/걱정/증상재발',
12:	'감정/고독감',
13:	'감정/곤혹감',
14:	'감정/공포',
15:	'감정/공포/새',
16:	'감정/공허감',
17:	'감정/과민반응',
18:	'감정/괴로움',
19:	'감정/기분저하',
20:	'감정/기시감',
21:	'감정/긴장/가슴떨림/떨림',
22:	'감정/눈물',
23:	'감정/답답',
24:	'감정/답답/사람많은곳',
25:	'감정/당황',
26:	'감정/두려움',
27:	'감정/두려움/운전',
28:	'감정/두려움/자동차',
29:	'감정/멍함',
30:	'감정/모호함',
31:	'감정/무력감',
32:	'감정/무미건조',
33:	'감정/무서움',
34:	'감정/미안함/자녀',
35:	'감정/미움',
36:	'감정/배신감',
37:	'감정/부정적사고',
38:	'감정/분노',
39:	'감정/불만',
40:	'감정/불신',
41:	'감정/불안감',
42:	'감정/불안감/긴장',
43:	'감정/불안감/미래',
44:	'감정/불안감/증상재발',
45:	'감정/불안감/초조함',
46:	'감정/불쾌감',
47:	'감정/불편감',
48:	'감정/비관적',
49:	'감정/살인욕구',
50:	'감정/생각',
51:	'감정/서운함',
52:	'감정/속상함',
53:	'감정/슬픔',
54:	'감정/신경쓰임',
55:	'감정/심란',
56:	'감정/억울함',
57:	'감정/예민함',
58:	'감정/외로움',
59:	'우울감/정신질환',
60:	'감정/우울감/눈물',
61:	'감정/우울감/증상재발',
62:	'감정/우울감/증상지속',
63:	'감정/의기소침',
64:	'감정/의기소침/자격지심',
65:	'감정/의욕상실',
66:	'의욕상실/무기력/은둔',
67:	'감정/자괴감',
68:	'감정/자살충동',
69:	'감정/자신감저하',
70:	'감정/자존감저하',
71:	'감정/절망감',
72:	'감정/좌절',
73:	'감정/죄책감',
74:	'감정/즐거움',
75:	'감정/짜증',
76:	'감정/창피함',
77:	'감정/초조함',
78:	'감정/충격',
79:	'감정/통제력상실',
80:	'감정/허무함',
81:	'감정/화',
82:	'감정/후회',
83:	'힘듦/스트레스/공격적성향/피로',
84:	'내원이유/상담/의사소견/치료',
85:	'모호함',
86:	'배경/가족',
87:	'가족/갈등/무관심',
88:	'건강문제/갑상선/가슴통증/건강염려',
89:	'건강문제/다이어트',
90:	'건강문제/생리불순',
91:	'수술/항암/낙태',
92:	'배경/건강문제/알레르기',
93:	'배경/결혼',
94:	'배경/결혼/미혼',
95:	'경제적문제',
96:	'공부',
97:	'군입대',
98:	'귀국',
99:	'연애',
100:'연애/고민/없음',
101:'연애/고민',
102:'배경/남자친구/집착',
103:'배경/남편',
104:'배경/남편/갈등',
105:'남편/갈등',
106:'남편/양호',
107:'남편/의심',
108:'배경/대인관계/갈등',
109:'배경/대인관계/양호',
110:'배경/대학',
111:'배경/대학/실패',
112:'배경/대학/입학',
113:'배경/대학/재수',
114:'배경/대학/휴학',
115:'배경/문제/술',
116:'배경/문제/머리카락/털뽑기',
117:'배경/문제/불면',
118:'배경/문제/소변',
119:'배경/문제/불편감/옷',
120:'배경/부모',
121:'배경/부모/가출/아버지',
122:'배경/부모/갈등',
123:'배경/부모/무관심',
124:'배경/부모/싸움',
125:'배경/부모/아버지',
126:'배경/부모/죽음',
127:'배경/부모/아버지/폭력',
128:'배경/이혼',
129:'배경/사고',
130:'배경/사업',
131:'배경/사업/남편/동업자',
132:'배경/생활',
133:'배경/생활/불가능/운전',
134:'배경/일상',
135:'배경/생활/폭행/피해',
136:'배경/생활/혼자',
137:'배경/휴식',
138:'배경/성격',
139:'배경 / 시댁',
140:'배경 / 시댁 / 갈등',
141:'배경 / 아르바이트',
142:'배경 / 애완동물 / 가족 / 갈등',
143:'배경 / 어린시절',
144:'배경 / 유학',
145:'배경 / 육아 / 힘듦',
146:'배경 / 음주',
147:'배경 / 이사',
148:'배경/임신',
149:	'배경/종교',
150:	'배경/직장',
151:	'배경/직장/고민',
152:	'배경/직장/복직',
153:	'배경/직장/양호',
154:	'배경/직장/없음/흥미',
155:	'배경/진로',
156:	'배경/취업',
157:	'배경/취업/준비',
158:	'배경/친구/문제',
159:	'배경/학교',
160:	'배경/학교/갈등/선생님',
161:	'학교/결석/자퇴',
162:	'배경/학교/따돌림',
163:	'배경/학업/부진',
164:	'배경/학업/우수',
165:	'일반대화',
166:	'상태/양호',
167:	'상대/증상문제',
168:	'원인/없음',
169:	'자가치료/심리조절',
170:	'증상/가슴답답/가슴통증',
171:	'증상/발작',
172:	'증상/과대망상',
173:	'증상/과수면',
174:	'증상/기억력저하',
175:	'증상/기억상실',
176:	'증상/기절',
177:	'증상/대화기피',
178:	'증상/두근거림',
179:	'증상/두근거림/불면',
180:	'증상/두통',
181:	'증상/메스꺼움',
182:	'증상/반복사고',
183:	'증상/반복행동',
184:	'증상/불면',
185:	'증상/성격변화',
186:	'증상/성욕상승',
187:	'증상/소화불량',
188:	'증상/속쓰림',
189:	'증상/시력저하',
190:	'증상/식욕저하',
191:	'증상/신체이상/목',
192:	'증상/악몽',
193:	'증상/어지러움',
194:	'증상/은둔',
195:	'증상/이명',
196:	'증상/이인감',
197:	'증상/인지기능저하',
198:	'증상/죽음공포',
199:	'증상/저림현상/발/손',
200:	'증상/집중력저하',
201:	'증상/체력저하',
202:	'증상/체중감소',
203:	'증상/체중증가',
204:	'증상/컨디션저조',
205:	'증상/통증',
206:	'증상/폭식',
207:	'증상/피해망상',
208:	'증상/호흡곤란',
209:	'증상/환각',
210:	'증상/환청',
211:	'증상/힘빠짐',
212:	'치료이력/검사',
213:	'증상/검사/양호',
214:	'치료이력/병원내원',
215:	'치료이력/병원내원/복약',
216:	'치료이력/응급실'
}

        # 의도 분류 모델 불러오기
        self.model = load_model(model_name)

        # 챗봇 Preprocess 객체
        self.p = proprocess

    def predict_class(self,query):
        pos = self.p.pos(query)

        #불용어 제거, 키워드 추출
        keywords = self.p.get_keywords(pos,without_tag=True)
        sequences = [self.p.get_wordidx_sequence(keywords)]
        print(sequences)
        from config.GlobalParams import MAX_SEQ_LEN
        padded_seqs = preprocessing.sequence.pad_sequences(sequences, maxlen=MAX_SEQ_LEN, padding='post')

        predict = self.model.predict(padded_seqs)
        predict_class = tf.math.argmax(predict, axis=1)
        return predict_class.numpy()[0]